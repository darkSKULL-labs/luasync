$Id: io.txt,v 1.4 2006-08-31 21:30:04 ezdy Exp $
Disk I/O interface
------------------
io.open(fname, "rwcx")
	open given fname, flags:
		r - for reading
		w - for writing
		c - create
		x - exclude (for create)

io.stat(fname)
	returns a pseudo-table with follwing keys:
	dev, ino, mode, nlink, uid, gid, rdev, atime, mtime, ctime, size, blocks, blksize
	the names are self-explanatory. consult man page for stat() for more.
	mode is in ls format, that is: 'drwxrwxrwx'. additionaly, you can use following pseudomacros:
	XOTH
	WOTH
	ROTH
	XGRP
	WGRP
	RGRP
	XOWN
	WOWN
	ROWN
	to check exact permissions.
	ISUID
	ISGID
	ISVTX
	to check setuid/gid/sticky bits
	IFSOCK
	IFLNK
	IFREG
	IFBLK
	IFDIR
	IFCHR
	IFIFO
	to check additional info about file.

io.lstat(fname)
	same as above, but dont dereference symlinks

io.fstat(fd)
	same as stat, but for opened fd

io.read(fd, buf, count[, offset])
	returns a buffer with data read

io.write(fd, buf[, offset])
	returns number of bytes written

io.sendfile(from, to, offset[, count]])
	sendfile from fiel to socket 'to'.
	offset is where to start and count is maximum
	limit to be sent.

io.seek(fd, [offset[, "bes"]])
	seek in file at position
		s - since start 
		e - since end
		c - since current
io.close(fd)
	close the file handle, freeing any resources associated with it.

io.lsdir(fname)
	returns a directory-reading iterator

io.dir([newdir])
	tell us current directory, or change to new directory 'newdir'

io.unlink(fname)
	remove given file

io.rmdir(fname)
	remove given directory (must be empty)

io.chmod(fname, mode)
io.fchmod(fd, mode)
	change permissions

io.chown(fname, uid, gid)
io.fchown(fd, uid, gid)
io.lchown(fname, uid, gid)
	change owner. either uid or gid can be omitted with nil or -1
io.readlink(fname)
	returns symbolic link target (as a string)

Disk AIO interface
------------------
The following is provided to handle aio:
aobj = {}
aobj.fd = file descriptor
aobj.off = offset
aobj.len = length to be read/written
aobj.buf = when defined, we perform write operation
aobj.cb = callback to be called/resumed upon event completion

aio.do(aobj) execute the aio request
aio.cancel(aobj) cancel the aio request

cb is called with:
cb(aobj, [buf|written])

aobj is just table with parameters, aiocb cache (to avoid gc pollution) which can
be reused and contain any number of other fields.

